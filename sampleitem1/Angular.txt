Angular is a javascript framework for building client side applications.

Each component has a template, which is the html defining a view for the application, its like a UI.
Then it has a class, for the code associated with the view , the class contains the properties, or data elements , available for binding the view, and methods which performs actions for the view.
Component also has metadata, which provides additional info about the component to angular. The metadata is defined with a decorator, a decorator is a function that adds metadata to a class, its members or its method arguments.

index.html contains the main page of the application, this is often the only web page of the application.

Angular modules helps us organise our application into cohesive blocks of functionality.
When the angular compiler sees a directive and a template, it looks to the angular module for the definition.
So we declare the AppComponent in an angular module so the compiler can find it.

Interpolation is a one way binding from the class property to the template. It can also perform some operations like concatenation. (Interpolation always assigns a string)
ngIf is a great way to optionally display content.BrowserModule exposes the ngIf and ngFor directives.
ngFor repeats a portion of the DOM tree once for each item in an iterable list.

Property binding allows us to set a property of an element to the value of a template expression.
<img [src] ='product.imageUrl'> here we bind the source property of the image to the product's imageUrl

A component listens for user actions using event binding, event binding allows us to connect an event to a method in the component. 
<button (click)='toggleImage()'>

Two binding is done with ngModel. We enclose ngModel in square brackets to indicate property binding from the component property to the input element and parentheses to indicate event binding to send a notification of the user-entered text back to the component. 

An interface is a specification identifying a related set of properties and methods.There are 2 ways to use an interface, as a datatype, and as a feature set.

An arrow function is compact syntax for defining a function.

Lifecycle hooks
When a component is first created and initialised, we may want to get the data for the page, so we implement OnInit lifecycle hook and write code in that hook method to get our data.
OnChanges: perform action after change to input properties
OnDestroy lifecycle hook to perform any cleanup before angular destroys any component.

Dependency injection is a coding pattern in which a class receives the instances of the object it needs (called dependencies) from an external source rather than creating them itself.
Any class that needs the service, specify the service as a dependency . Use a constructor parameter to define the dependency.The angular injector will inject an instance of the service when the component is instantiated.

An Observable is a collection of items over time, so its a collection but unlike an array, it doesn't retain items.
Rather the emitted items can be observed over time. When we subscribe, the observable begins emitting notifications. There are 3 typed of notifications: next, error, complete.













